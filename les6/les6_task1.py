'''
Для оценки «Отлично» необходимо выполнить все требования, указанные в задании и примечаниях.

1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее
эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);

проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев
в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
а проявили творчество, фантазию и создали универсальный код для замера памяти.
'''
import random
import sys
import platform

# Меняем исходную функцию так, чтобы она только печатала размер всего элемента
# без рекурсивного прохода внутрь и возвращала этот размер.
# Специально оставил закомментированную часть чтобы показать изменения исходной функции
def show_size(x, level=0):
    print('\t' * level, f'type =  {x.__class__}, size = {sys.getsizeof(x)}, object = {x}')
    return sys.getsizeof(x)
    # if hasattr(x, '__iter__'):
    #     if hasattr(x, 'items'):
    #         for xx in x.items():
    #             show_size(xx, level + 1)
    #     elif not isinstance(x ,str):
    #         for xx in x:
    #             show_size(xx, level + 1)


# Аккумулиурует size и выводит на экран
def show_elements_size(*args):
    size = 0
    print('*' * 50)
    print('Elements: ')
    print('*' * 50)
    for arg in args:
        size += show_size(arg)
    print('*' * 50)
    print(f'Total size: {size} bytes')
    print('*' * 50)


# Вычисление максимального элемента из всех отрицательных через один список без использования встроенных функций
def max_neg1(a_max_size):
    inf = float('inf')
    max_neg_elem = -inf
    max_neg_elem_i = -inf

    a = [random.randint(-1000, 1000) for _ in range(0, a_max_size)]
    print('+' * 12)
    print('+ max_neg1 +')
    print('+' * 12)
    print('Array: ')
    for item in a:
        print(f'{item:>5}', end='')
    print()
    for i in range(0, a_max_size):
        print(f'{i:>5}', end='')
    for i, elem in enumerate(a):
        if elem < 0 and elem > max_neg_elem:
            max_neg_elem = elem
            max_neg_elem_i = i
    if max_neg_elem > -inf:
        print()
        print('Max negative element index:')
        print(max_neg_elem_i)
        print('Max negative element:')
        print(max_neg_elem)
        show_elements_size(inf, max_neg_elem, max_neg_elem_i, a, a_max_size, item, i, elem)
        return (max_neg_elem_i, max_neg_elem)


# Вычисление максимального элемента из всех отрицательных через один словарь без использования встроенных функций
def max_neg2(a_max_size):
    inf = float('inf')
    max_neg_elem = -inf
    max_neg_elem_i = -inf
    print('+' * 12)
    print('+ max_neg2 +')
    print('+' * 12)
    print('Array: ')
    a = {i: random.randint(-1000, 1000) for i in range(0, a_max_size)}
    for item in a.values():
        print(f'{item:>5}', end='')
    print()
    for i in range(0, a_max_size):
        print(f'{i:>5}', end='')
    for i, elem in a.items():
        if elem < 0 and elem > max_neg_elem:
            max_neg_elem = elem
            max_neg_elem_i = i
    if max_neg_elem > -inf:
        print()
        print('Max negative element index:')
        print(max_neg_elem_i)
        print('Max negative element:')
        print(max_neg_elem)
        show_elements_size(inf, max_neg_elem, max_neg_elem_i, a, a_max_size, item, i, elem)
        return (max_neg_elem_i, max_neg_elem)


# Вычисление максимального элемента из всех отрицательных через два списка с использованием встроенной функции max()
def max_neg3(a_max_size):
    a = [random.randint(-1000, 1000) for i in range(0, a_max_size)]
    print('+' * 12)
    print('+ max_neg3 +')
    print('+' * 12)
    print('Array: ')
    for item in a:
        print(f'{item:>5}', end='')
    print()
    for i in range(0, a_max_size):
        print(f'{i:>5}', end='')
    b = [value for value in a if value < 0]

    if len(b) > 0:
        max_neg_elem = max(b)
        for i, elem in enumerate(a):
            if elem == max_neg_elem:
                max_neg_elem_i = i
        if a_max_size > 0:
            print()
            print('Max negative element index:')
            print(max_neg_elem_i)
            print('Max negative element:')
            print(max_neg_elem)
            show_elements_size(max_neg_elem, max_neg_elem_i, a, b, a_max_size,item,i,elem)
            return (max_neg_elem_i, max_neg_elem)
    else:
        return None

if __name__ == "__main__":
    print(sys.version)
    print(sys.platform)
    print(platform.architecture())
    max_neg1(100)
    max_neg2(100)
    max_neg3(100)

'''
3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)]
win32
('32bit', 'WindowsPE')
Из результатов выполнения видно, что лучшей реализацией с точки зрения используемой статической памяти 
является функция max_neg1 - Total size: 560 bytes. Следующая функция max_neg2 сильно проигрывает по памяти 
(Total size: 2720 bytes) т.к. в ее реализации используется словарь вместо списка, который сам по себе 
занимает 2620 bytes вместо 460 bytes на список из первой реализации. Третья реализация max_neg3 хуже чем
max_neg1 но лучше чем max_neg2 т.к. использует два списка 460 bytes  и 268 bytes соответственно и в общем
она использует 812 bytes памяти. Также можно обратить внимание, что переменные-счетчики цикла также 
используют память и хранят последнее значение даже после выхода из цикла вплоть до завершения работы скрипта,
поэтому их количество также влияет на используемую память.
'''
'''
3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 19:29:22) [MSC v.1916 32 bit (Intel)]
win32
('32bit', 'WindowsPE')
++++++++++++
+ max_neg1 +
++++++++++++
Array: 

    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99
Max negative element index:
2
Max negative element:
-16
**************************************************
Elements: 
**************************************************
 type =  <class 'float'>, size = 16, object = inf
 type =  <class 'int'>, size = 14, object = -16
 type =  <class 'int'>, size = 14, object = 2
 type =  <class 'list'>, size = 460, object = [-590, -686, -16, 775, 316, -748, 668, -295, 380, -272, -570, 315, -321, -914, -890, -40, -493, 155, 287, 417, 288, -203, 223, -29, -794, -801, -632, 196, -571, 43, 848, -822, 738, -920, -838, -38, 950, 776, -442, -667, -212, -757, -618, 394, 817, 623, -483, -308, 918, 483, 874, 626, -319, -74, -141, -589, 61, -294, 222, -689, -521, 670, -90, 397, 928, 946, -516, -688, -479, 277, -760, 382, 816, 939, -731, 755, -631, 231, -110, -480, -850, -465, -64, -799, 457, -159, -445, 902, -992, 393, 197, 111, 686, -995, -263, -1000, -925, -988, -797, 119]
 type =  <class 'int'>, size = 14, object = 100
 type =  <class 'int'>, size = 14, object = 119
 type =  <class 'int'>, size = 14, object = 99
 type =  <class 'int'>, size = 14, object = 119
**************************************************
Total size: 560 bytes
**************************************************
++++++++++++
+ max_neg2 +
++++++++++++
Array: 
 -148  609  626  368 -506  944 -381  611 -768  551  -23 -378  661 -937  494 -152  897 -864  292 -152  795  285  788 -383  808  998 -894 -431   17  228  103 -858  674 -335  244  907  302  736  355  560 -121 -130  208 -164  601  -75 -585  264  850 -446-1000 -480 -323 -667  820 -308 -665 -268  511  797  356  -44 -893  803  296 -218  829 -703 -861 -849 -852 -523 -458  766  799  202 -495 -482  463 -135 -901  845  983  279  380  469 -619  -86  860 -215 -337 -760  926   99  483  259   39  756 -945  352

Max negative element index:
10
Max negative element:
-23
**************************************************
Elements: 
**************************************************
 type =  <class 'float'>, size = 16, object = inf
 type =  <class 'int'>, size = 14, object = -23
 type =  <class 'int'>, size = 14, object = 10
 type =  <class 'dict'>, size = 2620, object = {0: -148, 1: 609, 2: 626, 3: 368, 4: -506, 5: 944, 6: -381, 7: 611, 8: -768, 9: 551, 10: -23, 11: -378, 12: 661, 13: -937, 14: 494, 15: -152, 16: 897, 17: -864, 18: 292, 19: -152, 20: 795, 21: 285, 22: 788, 23: -383, 24: 808, 25: 998, 26: -894, 27: -431, 28: 17, 29: 228, 30: 103, 31: -858, 32: 674, 33: -335, 34: 244, 35: 907, 36: 302, 37: 736, 38: 355, 39: 560, 40: -121, 41: -130, 42: 208, 43: -164, 44: 601, 45: -75, 46: -585, 47: 264, 48: 850, 49: -446, 50: -1000, 51: -480, 52: -323, 53: -667, 54: 820, 55: -308, 56: -665, 57: -268, 58: 511, 59: 797, 60: 356, 61: -44, 62: -893, 63: 803, 64: 296, 65: -218, 66: 829, 67: -703, 68: -861, 69: -849, 70: -852, 71: -523, 72: -458, 73: 766, 74: 799, 75: 202, 76: -495, 77: -482, 78: 463, 79: -135, 80: -901, 81: 845, 82: 983, 83: 279, 84: 380, 85: 469, 86: -619, 87: -86, 88: 860, 89: -215, 90: -337, 91: -760, 92: 926, 93: 99, 94: 483, 95: 259, 96: 39, 97: 756, 98: -945, 99: 352}
 type =  <class 'int'>, size = 14, object = 100
 type =  <class 'int'>, size = 14, object = 352
 type =  <class 'int'>, size = 14, object = 99
 type =  <class 'int'>, size = 14, object = 352
**************************************************
Total size: 2720 bytes
**************************************************
++++++++++++
+ max_neg3 +
++++++++++++
Array: 
 -487 -987  879  302 -404 -239  438  353 -275 -130  -70   56 -495  591  327  477  851 -499  284 -620 -791 -248 -179  968 -372 -290  683 -757  -55 -253  888 -247 -291  185 -798 -752  -71 -501  987  302 -152 -375 -291 -721  847  543  121 -104 -634  886 -583 -954 -498 -275 -389 -318  158   58 -710   92 -413 -275  875  582  580  118  615 -777  664 -860  597 -225  899 -211  417 -640  191  -48  214 -100   34  263  -63   11   79 -733 -511 -781 -503  246 -897  679  376   75  -57  -28  -41  861  261  331

Max negative element index:
95
Max negative element:
-28
**************************************************
Elements: 
**************************************************
 type =  <class 'int'>, size = 14, object = -28
 type =  <class 'int'>, size = 14, object = 95
 type =  <class 'list'>, size = 460, object = [-487, -987, 879, 302, -404, -239, 438, 353, -275, -130, -70, 56, -495, 591, 327, 477, 851, -499, 284, -620, -791, -248, -179, 968, -372, -290, 683, -757, -55, -253, 888, -247, -291, 185, -798, -752, -71, -501, 987, 302, -152, -375, -291, -721, 847, 543, 121, -104, -634, 886, -583, -954, -498, -275, -389, -318, 158, 58, -710, 92, -413, -275, 875, 582, 580, 118, 615, -777, 664, -860, 597, -225, 899, -211, 417, -640, 191, -48, 214, -100, 34, 263, -63, 11, 79, -733, -511, -781, -503, 246, -897, 679, 376, 75, -57, -28, -41, 861, 261, 331]
 type =  <class 'list'>, size = 268, object = [-487, -987, -404, -239, -275, -130, -70, -495, -499, -620, -791, -248, -179, -372, -290, -757, -55, -253, -247, -291, -798, -752, -71, -501, -152, -375, -291, -721, -104, -634, -583, -954, -498, -275, -389, -318, -710, -413, -275, -777, -860, -225, -211, -640, -48, -100, -63, -733, -511, -781, -503, -897, -57, -28, -41]
 type =  <class 'int'>, size = 14, object = 100
 type =  <class 'int'>, size = 14, object = 331
 type =  <class 'int'>, size = 14, object = 99
 type =  <class 'int'>, size = 14, object = 331
**************************************************
Total size: 812 bytes
**************************************************
'''