'''
Для оценки «Отлично» необходимо выполнить все требования, указанные в задании и примечаниях.

1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее
эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);

проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев
в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
а проявили творчество, фантазию и создали универсальный код для замера памяти.
'''
import memory_profiler
import random

# Вычисление максимального элемента из всех отрицательных через один список без использования встроенных функций
@profile
def max_neg1(a_max_size):
    inf = float('inf')
    max_neg_elem = -inf
    max_neg_elem_i = -inf

    a = [random.randint(-1000, 1000) for _ in range(0, a_max_size)]
    # for item in a:
    #     print(f'{item:>5}',end ='')
    for i,elem in enumerate(a):
        if elem < 0 and elem > max_neg_elem:
            max_neg_elem = elem
            max_neg_elem_i = i
    if max_neg_elem > -inf:
        # print()
        # print('Index:')
        # print(max_neg_elem_i)
        # print('Max negative element:')
        # print(max_neg_elem)
        return (max_neg_elem_i,max_neg_elem)

if __name__ == "__main__":
    max_neg1(100)
